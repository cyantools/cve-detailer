#!/usr/bin/python3

import os
import re
import sys
import json
import logging
import smtplib
import argparse
import requests
import pyfiglet

from termcolor import cprint	
from datetime import datetime
from colorama import Fore, Back, Style, init


def warn(text):
	logging.warning('[*] ' + text)
	print(Fore.YELLOW + '[*]' + Style.RESET_ALL + ' ' + text)

def info(text):
	logging.info('[-] ' + text)
	print(Fore.GREEN + '[-]' + Style.RESET_ALL + ' ' + text)

def alert(text):
	logging.error('[!] ' + text)
	print(Fore.RED + '[!]' + Style.RESET_ALL + ' ' + text)

		
def getIDs(product, version):
	hf = re.compile('(id-[\d]+|id=[\d]+)')
	url = 'https://www.cvedetails.com/version-search.php'

	if 'Apache' in product: product = 'http server'
	payload = {'product': product, 'version': version}
	response = requests.post(url, data=payload)
	lines = response.text.splitlines()
	vendor_id  = None
	product_id = None
	version_id = None
	
	for line in lines:
		try:
			if 'No matches' in line:
				return (None, None)
			elif 'version_id' in line:
				matches = re.findall(hf,line)
				vendor_id  = matches[0][3:]
				product_id = matches[1][3:]
				version_id = matches[2][3:]
				ids = (product_id, version_id)
		except ValueError:
			pass
		except IndexError:
			pass
		except TypeError:
			pass
	
	if product_id is not None and version_id is not None:
		return (product_id, version_id)
	else:
		print('Product or version Not found')
		return (None, None)

	

def getCVSs(product_id, version_id):
	url = 'https://www.cvedetails.com/json-feed.php'
	payload = {'product_id': product_id, 'version_id': version_id}
	response = requests.post(url, data=payload)
	return response.json()
	
	
def cve_text(cve):
	message  = "CVE ID: " + cve['cve_id'] + "\r\n"
	message += "CVSS Score: " + cve['cvss_score'] + "\r\n"
	message += "Exploit count: " + cve['exploit_count'] + "\r\n"
	try:
		message += "Product afected: " + cve['product'] + " version " + ', '.join(cve['afected_ver']) + "\r\n"
	except KeyError:
		message += "Product afected: " + cve['product'] + " " + cve['version'] + "\r\n"
	message += "Publish date: " + cve['publish_date'] + "\r\n"
	message += "Update date: " + cve['update_date'] + "\r\n"
	message += "Summary: " + cve['summary'] + "\r\n"
	message += "URL: " + cve['url'] + "\r\n"
	return message
	


now = datetime.now()
today = now.strftime("%Y%m%d")

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--product', 		dest='product', default=None, help="Product name")
parser.add_argument('-v', '--version', 		dest='version', default=None, help="Product version")
parser.add_argument('-l', '--logfile', 		dest='logfile', default=os.devnull, help="Optional logging file")
parser.add_argument('-q', '--quiet', 		dest='quiet', default=False, action='store_false', help="Show only CVE count")
args = parser.parse_args()


init(strip=not sys.stdout.isatty())
ascii_banner = pyfiglet.figlet_format("CVE-Detailer")
cprint(ascii_banner, "blue")

logging.basicConfig(level=logging.INFO, filename=args.logfile, filemode='w', format='%(message)s')


pro = args.product
ver = args.version
cve_list = {}

if pro is not None and ver is not None:
	pid, vid = getIDs(pro, ver)
	# print(pro + ' -> '+ str(pid))
	# print(ver + ' -> '+ str(vid))
	if pid and vid:
		cves = getCVSs(pid, vid)
		#print (json.dumps(cves, indent=4, sort_keys=True))
		if len(cves) > 0:
			alert('Found {n} CVEs for {p} version {v} \n'.format(n=len(cves),p=pro, v=ver))
		else:
			info ('Found {n} CVEs for {p} version {v} \n'.format(n=len(cves),p=pro, v=ver))
		for cve in cves:
			cve_date = (cve['publish_date']).replace("-","")
			cve['product'] = pro
			cve['version'] = 'version ' + ver
			cve['input_date'] = now
			id = cve['cve_id']

			if not args.quiet:
				text = cve_text(cve)
				print(text)
				logging.info(text)
	else:
		info('No matches for {p} {v}'.format(p=pro, v=ver))
else:
	parser.print_help()
